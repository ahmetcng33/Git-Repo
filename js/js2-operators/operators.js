console.log("JS dosyasi baglandi");


// var deneme = 5;

// varDeneme = 6;

// let myVar = 5;

// const myVar1= 6;



//!  Aritmetiksel operatÃ¶rler

//+, -, *, /, %, **


// const num1 = 10;
// const num2 = 69;

// const toplam = num1 + num2;  //num1 ve num2 operand, 
// //+ operator olarak adlandÄ±rÄ±lÄ±r

// console.log(toplam);

// const msg1 = "Hello"
// const msg2  = "World!"
// //console.log(msg1 + " " + msg2); 

// const cÃ¼mle = msg1 + " " + msg2;   //?  +  operatÃ¶rÃ¼ String Concatenation iÅŸlemi de yapar
// console.log(cÃ¼mle);


//! Template Literals (Es6 ile gelen bir Ã¶zellik)

// console.log(`${msg1} ${msg2}`);
// // console.log(cÃ¼mle);


// const num3 = "6";
// const num4 = "7";
// console.log(num3 + num4);
// console.log(num3 + 7);//67 js otamatik tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yaparak buradaki ifadeyi concatenat eti.
//? + operatÃ¶rÃ¼nde string deÄŸiÅŸken Ã¼stÃ¼n gelir ve dÃ¶nÃ¼ÅŸÃ¼mÃ¼ stringe yapar 76 Ã§Ä±ktÄ±sÄ±nÄ± verdi.



//! - operatÃ¶rÃ¼

// const x = 55;
// const y = 44;

// console.log(x - y);

// const myNum= "1";
// console.log(x - myNum);//54. - operatÃ¶rÃ¼nde string deÄŸiÅŸkeni numbera Ã§evirir.
// const yourNum = "one"
// console.log(x - yourNum);//NaN(not a number)
// //? string ifadeyi numbera dÃ¶nÃ¼ÅŸtÃ¼rmeye Ã§alÄ±ÅŸÄ±yor ama bu mÃ¼mkÃ¼n olmadÄ±ÄŸÄ± iÃ§in dÃ¶nÃ¼ÅŸtÃ¼remiyor ve bu nedenle iÅŸlemin sonucunu NaN dÃ¶ndÃ¼rÃ¼yor matematiksel olarak belirsiz veya tanÄ±msÄ±z bir deÄŸer temsil eder.

//! * operatÃ¶rÃ¼

// let carp1 = 7;
// let carp2 = 9;
// console.log(carp1 * carp2); // 63

// console.log("a" * "b"); // NaN
// console.log("a" * 3); // NaN

// console.log("5" * "9"); // 45. karakterler numeric ise numebr gibi davranarak iÅŸlemi gerÃ§ekleÅŸtiriyor.
// console.log(typeof ("5" * "9")); // number


//! / operatÃ¶rÃ¼

// const bÃ¶l1 = 81;
// const bÃ¶l2 = 9;

// console.log(bÃ¶l1 / bÃ¶l2); // 9

// console.log(bÃ¶l1 / "9"); // 9
// console.log(bÃ¶l1 / "dokuz"); // NaN

// console.log(bÃ¶l2 / 0); // Infinity
// console.log(-61 / 0); // -Infinity
// //? JavaScript ile sonsuzluk-sÄ±nÄ±r deÄŸerini ifade etmek iÃ§in Infinity veya -Infinity anahtar kelimesi kullanÄ±lÄ±r. Bir sayÄ±nÄ±n 0'a bÃ¶lÃ¼nmesi Infinity veya â€“Infinity deÄŸeri dÃ¶ndÃ¼rÃ¼r.

// console.log(0 / 5); // 0

// console.log(57/5);

//! % (mod alma) operatÃ¶rÃ¼ (bÃ¶lÃ¼mdeki kalan sayÄ±yÄ± bulur)


// const mod1 = 57;
// const mod2 = 9;
// console.log(mod1 % mod2);


// const benimSayim = 967;

// const birlerBas = benimSayim%10;
// console.log(birlerBas);
// const onlarBas = (benimSayim%100 - benimSayim%10)/10;
// console.log(onlarBas);
// const yÃ¼zlerBas = benimSayim /100; //9.67
// console.log(yÃ¼zlerBas);

//?Bazi hazÄ±r fonksiyonlar
// Math.floor();  //* her zaman en yakin alt tam sayiya yuvarlar
// Math.ceil();  //* her zaman en yakin ust tam sayiya yuvarlar
// Math.trunc(); //* sayinin tam kismini alir.
// Math.round(); //* en yakin tam sayiya yuvarlar.
// Math.random(); //* 0 ve 1 arasÄ±nda rasgele sayi uretir.
// toFixed(basamakSayÄ±sÄ±): // . dan sonra parantezin iÃ§ine verdiÄŸimiz sayÄ± kadar basamak alÄ±r. EÄŸer noktadan sonraki basamak sayÄ±sÄ± iÃ§ine verdiÄŸimiz sayÄ±dan bÃ¼yÃ¼kse sondaki rakamÄ± bir artÄ±rÄ±r.

// console.log(`YÃ¼zlerbas: ${Math.trunc(yÃ¼zlerBas)}, Onlarbas: ${Math.trunc(onlarBas)}, BirlerBas : ${birlerBas}`);

// const randomNum = Math.trunc((Math.random() *100))
// console.log(randomNum);


//! ** (Ã¼s alma) operatÃ¶rÃ¼

// const Ã¼s1 = 2;
// const Ã¼s2= 3;
// console.log(Ã¼s1 ** Ã¼s2);

// const pi = 3.14;
// const yariCap = 9;

// const alan = Math.trunc(pi * yariCap ** 2);
// console.log(alan);

//! ðŸ”¥ðŸ”¥ðŸ”¥              ArtÄ±rma ve Eksiltme OperatÃ¶rleri

//? ++ ve -- operatÃ¶rleri 1 artÄ±rÄ±r veya 1 eksiltir

// // sonrasÄ± artÄ±rma ve eksiltme
// let number1 = 6;
// //  let artirNew = number1 // 6
// //  number1= number1 +1// 7
// let number1New = number1++; // Ã¶nce atadÄ± sonrasÄ±nda number1 deÄŸiÅŸkenini bir number1dÄ±
// console.log(number1New); // 6
// console.log(number1New); // 6
// console.log(number1); // 7
// console.log(number1New);


// let num= 5;
// let newNum = num++;
// //Ã¶nce atadÄ± sonra arttÄ±rdÄ±
// console.log(newNum);
// console.log(num);

// let newNum2 = ++num;
// // Ã¶nce artÄ±r sonra ata
// console.log(newNum2);

//! ðŸ”¥ðŸ”¥ðŸ”¥              Atama OperatÃ¶rleri

let nums1 = 14;
let nums2 = 17;
//! += Ekle ve Sonucu Ata
// nums2 = nums2 + nums1;
//? yukarÄ±daki gibi uzun uzun yazmak yerine += operatÃ¶rÃ¼nÃ¼ kullanarak iÅŸlemimi kÄ±saltmÄ±ÅŸ oldum. AynÄ± ÅŸekilde diÄŸer operatÃ¶rler iÃ§inde geÃ§erli.
// nums2 += nums1;
// console.log(nums2); // 31

let num14 = 6;
let num15 = 3;

//! -= Ã‡Ä±kar ve Sonucu Ata
// num14 = num14 - num15;
// num14 -= num15;
// console.log(num14); // 3

//! *= Ã‡arp ve Sonucu Ata
// num14 = num14 * num15;
num14 *= num15;
console.log(num14); //18
//! /= BÃ¶l ve Sonucu Ata
// num14 = num14 / num15;
// num14 /= num15;
// console.log(num14);
//! /= BÃ¶lÃ¼mden KalanÄ± Bul ve Ata
// num14 = num14 % num15;
// num14 %= num15;
// console.log(num14);

//! **= Ãœs Al ve Sonucu Ata
// num14 = num14 ** num15;
// num14 **= num15;
// console.log(num14);


//! ðŸ”¥ðŸ”¥ðŸ”¥              KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri

const num16 = 27;

// console.log(num16 == 27); //true
// console.log(num16 == "27"); // true
//? == (eÅŸitlik operatÃ¶rÃ¼), iki deÄŸeri karÅŸÄ±laÅŸtÄ±rÄ±rken tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapar. EÄŸer karÅŸÄ±laÅŸtÄ±rÄ±lan deÄŸerler farklÄ± tiplerde ise, JavaScript otomatik olarak bu deÄŸerleri aynÄ± tipe dÃ¶nÃ¼ÅŸtÃ¼rerek karÅŸÄ±laÅŸtÄ±rma yapar. Bu iÅŸlem sÄ±rasÄ±nda, deÄŸerler eÅŸitlenebilir bir forma getirilir ve ardÄ±ndan karÅŸÄ±laÅŸtÄ±rÄ±lÄ±r.

// console.log(num16 === 27); // true
// console.log(num16 === "27"); // false
// //? === operatÃ¶rÃ¼ otomatik tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapmadÄ±ÄŸÄ±ndan dolayÄ±, farklÄ± tiplerdeki deÄŸerleri eÅŸit olarak kabul etmez.tip ve deÄŸer aynÄ± mÄ± diye sorgular.

// // const user1 = prompt("LÃ¼tfen bir sayÄ± griniz: ");
// // const user2 = prompt("LÃ¼tfen bir sayÄ± griniz: ");
// // console.log(user1);
// // console.log(user2);
// // const isSame = user1 == user2;
// // console.log(isSame);

// console.log(true == 1); //true
// console.log(null == undefined); // true
// // true boolean deÄŸeri 1 sayÄ±sÄ± ile eÅŸit kabul edilir, null ve undefined ise birbirine eÅŸit kabul edilir.
// console.log(true === 1); // false
// console.log(null === undefined); // false

//? !=, !==

// console.log(15 != "15"); // false. Ã§Ã¼nkÃ¼ deÄŸerleri eÅŸit
// console.log(15 !== "15"); // true. Ã§Ã¼nkÃ¼ typelarÄ± eÅŸit deÄŸil

// //? >, < (BÃ¼yÃ¼k mÃ¼?, KÃ¼Ã§Ã¼k mÃ¼?)
// console.log(15 > 5); // true
// console.log(15 < 5); // false

// console.log("15" > 5); // true

// console.log("a" > "b"); // false.String ifadelerde ASCII'ye gore kiyaslama yapilir.
// console.log("a".charCodeAt()); // 97
// console.log("b".charCodeAt()); // 98
// //. .charCodeAt() metodu string karakterin ASCII karÅŸÄ±lÄ±ÄŸÄ±nÄ± verir.
// console.log("a" > "A");// true

//? >=, <= (BÃ¼yÃ¼k veya eÅŸit mi?, KÃ¼Ã§Ã¼k veya eÅŸit mi?)

// console.log(15 >= 15); //true
// console.log(15 <= 15); // true
// console.log(15 >= 16); // false
// // console.log(15 >== "15");// error verir. Ã‡Ã¼nkÃ¼ bu ÅŸekilde karÅŸÄ±laÅŸtÄ±rma operatÃ¶rÃ¼ bulunmuyor.
// console.log(15 >= "15"); // true
// console.log("14" <= "15"); // true

//! ðŸ”¥ðŸ”¥ðŸ”¥              MantÄ±ksal OperatÃ¶rler

// && and
console.log(true && true); // true
console.log(" " && true); // true

console.log(5 && "Merhaba"); // "Merhaba"
console.log(0 && "DÃ¼nya"); // 0
// && operatoru ilk gÃ¶rdÃ¼ÄŸÃ¼ falsy veya false deÄŸerini dÃ¶ner.
console.log(5 && 0); // 0
console.log(true && false); // false

//! || or
console.log(true || false); //true
console.log(5 || 15); // 5
console.log(5 || 0); // 5
console.log("" || "Merhaba"); // "Merhaba"
console.log("" || 0); // 0
// || operatoru true ve truthy deÄŸer arar. ilk gÃ¶rdÃ¼ÄŸÃ¼ true veya truthy dÃ¶ner.Bulamazsa son gÃ¶rdÃ¼ÄŸÃ¼ false veya falsy deÄŸeri dÃ¶ner.

// ! not
console.log(!true); // false
console.log(!false); // true
console.log(!0); // true
console.log(!5); // false

// falsy
console.log(Boolean(false)); // false
console.log(Boolean(0)); // false
console.log(Boolean(-0)); // false
console.log(Boolean(0n)); // false
console.log(Boolean("")); // false (boÅŸ string)
console.log(Boolean(null)); // false
console.log(Boolean(undefined)); // false
console.log(Boolean(NaN)); // false

// truthy
console.log(Boolean(true)); // true
console.log(Boolean({})); // true (boÅŸ object)
console.log(Boolean([])); // true (boÅŸ array)
console.log(Boolean(5)); // true
console.log(Boolean("0")); // true (dolu string)
console.log(Boolean("false")); // true (dolu string)
console.log(Boolean(Infinity)); // true
console.log(Boolean(new Date())); // true (tarih methodlarÄ±)
console.log(Boolean(function () {})); // true (boÅŸ fonksiyon)
console.log(
  Boolean(function () {
    console.log("Hello World!");
  })
); // true (boÅŸ fonksiyon)

// //! Ä°ÅŸlem Ã–nceliÄŸi sÄ±ralamasÄ±
// // 1. ! (not)
// // 2. && (and)
// // 3. || (or)
// const karÅŸilaÅŸtÄ±rma = ("merhaba" && "dÃ¼nya") || false || (28 && 67 && !0)
// console.log(karÅŸilaÅŸtÄ±rma) // dÃ¼nya

// //* kullanÄ±cÄ±dan vize ve final notunu prompt olarak alÄ±n. sabit bir canEgrisi(ortalama) belirleyiniz.
// //!KullanÄ±cÄ±nÄ±n vize ve final ortalamasÄ± canEgrisine eÅŸit veya bÃ¼yÃ¼kse KullanÄ±cÄ±ya "GeÃ§tiniz" mesajÄ± dÃ¶nÃ¼nÃ¼z. EÅŸit veya bÃ¼yÃ¼k deÄŸilse "KaldÄ±nÄ±z" ÅŸeklinde mesaj dÃ¶nÃ¼nÃ¼nÃ¼z.
// //! Not: prompt tan gelen veriler string olarak geliyor o nedenle dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi yapÄ±yoruz.
// let vize = Number(prompt("LÃ¼tfen vize notunuzu giriniz ?"))
// let final = Number(prompt("LÃ¼tfen final notunuzu giriniz ?"))
// let canEgrisi = 65
// let sonuc =
//   (Math.round((vize + final) / 2) >= canEgrisi && "GeÃ§tiniz!") || "KaldÄ±nÄ±z!"
// console.log(sonuc)

// * =============================================
// *            TIP DONUSUMLERI
// * =============================================

// let sayi = +prompt("Bir sayi girinz:") //? 100
// console.log(typeof sayi)
// let sayi2 = 10
// sayi = sayi + sayi2 //? concatination

// console.log(++sayi)

console.log(Number("123")) //? 123
console.log(Number("12.3")) //? 12.3
console.log(Number("0")) //? 0
console.log(Number(" ")) //? 0
console.log(Number("")) //? 0
console.log(Number(null)) //? 0
console.log(Number(undefined)) //? NaN

const myNumber = "threezeroone" //? string
let myNumber2 = Number(myNumber)
console.log(myNumber2) //? NaN
console.log(typeof myNumber2) //? number

const dolar = "1000.3"
const tl = "2000.2"

const totalMoney = Number(dolar) + +tl
console.log(totalMoney)

//* ALternatif olarak parseInt() ve parseFloat() da kullanilabilir.
const dolarInt = parseInt(dolar) //? tamsayiya cevirir
console.log(dolarInt)
const tlFloat = parseFloat(tl) //? virgÃ¼llÃ¼ sayiya Ã§evirir
console.log(tlFloat)

console.log(parseFloat(null)) //? NaN
console.log(parseFloat("")) //? NaN
console.log(parseFloat(undefined)) //? NaN

//? String
const myNumber3 = 2000.5
console.log(String(myNumber3))